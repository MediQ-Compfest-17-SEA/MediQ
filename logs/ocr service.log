
> ocr-service@0.0.1 start:dev
> nest start --watch

[2J[3J[H[[90m8:14:37 PM[0m] Starting compilation in watch mode...

[[90m8:14:39 PM[0m] Found 0 errors. Watching for file changes.

(node:1217484) [DEP0190] DeprecationWarning: Passing args to a child process with shell option true can lead to security vulnerabilities, as the arguments are not escaped, only concatenated.
(Use `node --trace-deprecation ...` to show where the warning was created)
[32m[Nest] 1217677  - [39m08/21/2025, 8:14:40 PM [32m    LOG[39m [38;5;3m[NestFactory] [39m[32mStarting Nest application...[39m
[32m[Nest] 1217677  - [39m08/21/2025, 8:14:40 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mAppModule dependencies initialized[39m[38;5;3m +7ms[39m
[32m[Nest] 1217677  - [39m08/21/2025, 8:14:40 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mClientsModule dependencies initialized[39m[38;5;3m +0ms[39m
[32m[Nest] 1217677  - [39m08/21/2025, 8:14:40 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mClientsModule dependencies initialized[39m[38;5;3m +0ms[39m
[31m[Nest] 1217677  - [39m08/21/2025, 8:14:40 PM [31m  ERROR[39m [38;5;3m[ExceptionHandler] [39mUnknownDependenciesException [Error]: Nest can't resolve dependencies of the UserService (?). Please make sure that the argument "USER_SERVICE" at index [0] is available in the OcrModule context.

Potential solutions:
- Is OcrModule a valid NestJS module?
- If "USER_SERVICE" is a provider, is it part of the current OcrModule?
- If "USER_SERVICE" is exported from a separate @Module, is that module imported within OcrModule?
  @Module({
    imports: [ /* the Module containing "USER_SERVICE" */ ]
  })

    at Injector.lookupComponentInParentModules [90m(/home/killerking/automated_project/compfest/MediQ/MediQ-Backend-OCR-Service/[39mnode_modules/[4m@nestjs[24m/core/injector/injector.js:286:19[90m)[39m
    at async resolveParam [90m(/home/killerking/automated_project/compfest/MediQ/MediQ-Backend-OCR-Service/[39mnode_modules/[4m@nestjs[24m/core/injector/injector.js:141:38[90m)[39m
    at async Promise.all (index 0)
    at async Injector.resolveConstructorParams [90m(/home/killerking/automated_project/compfest/MediQ/MediQ-Backend-OCR-Service/[39mnode_modules/[4m@nestjs[24m/core/injector/injector.js:169:27[90m)[39m
    at async Injector.loadInstance [90m(/home/killerking/automated_project/compfest/MediQ/MediQ-Backend-OCR-Service/[39mnode_modules/[4m@nestjs[24m/core/injector/injector.js:75:13[90m)[39m
    at async Injector.loadProvider [90m(/home/killerking/automated_project/compfest/MediQ/MediQ-Backend-OCR-Service/[39mnode_modules/[4m@nestjs[24m/core/injector/injector.js:103:9[90m)[39m
    at async [90m/home/killerking/automated_project/compfest/MediQ/MediQ-Backend-OCR-Service/[39mnode_modules/[4m@nestjs[24m/core/injector/instance-loader.js:56:13
    at async Promise.all (index 4)
    at async InstanceLoader.createInstancesOfProviders [90m(/home/killerking/automated_project/compfest/MediQ/MediQ-Backend-OCR-Service/[39mnode_modules/[4m@nestjs[24m/core/injector/instance-loader.js:55:9[90m)[39m
    at async [90m/home/killerking/automated_project/compfest/MediQ/MediQ-Backend-OCR-Service/[39mnode_modules/[4m@nestjs[24m/core/injector/instance-loader.js:40:13 {
  type: [32m'UserService'[39m,
  context: {
    index: [33m0[39m,
    dependencies: [
      [32m'USER_SERVICE'[39m
    ],
    name: [32m'USER_SERVICE'[39m
  },
  metadata: {
    id: [32m'480c0d892d79d76ccbc7f'[39m
  },
  moduleRef: {
    id: [32m'106a3f45bf39964b15827'[39m
  }
}
